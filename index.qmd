---
title: "Lifestyle as a predictor of loneliness: a longitudinal study"
subtitle: "Data analysis code"
author:
  - name: Bruno Braga Montezano
    id: bm
    orcid: 0000-0002-4627-1776
    email: bmontezano@hcpa.edu.br
    affiliation: 
      - name: Federal University of Rio Grande do Sul
        city: Porto Alegre
        state: RS
        url: https://www.ufrgs.br/ppgpsiquiatria/
license: "CC BY"
copyright: 
  holder: Bruno Braga Montezano
  year: 2023
date: today
lang: en
theme: journal
execute:
  message: false
format:
  html:
    code-fold: true
---

# 1. Load the data

```{r load-data}
df <- haven::read_sav("./data/covidpsy_weighted.sav") |>
    janitor::clean_names() |>
    haven::as_factor()
```

First, we used the `read_sav` function from the `haven` package to load the
dataset. The original data has `r nrow(df)` rows and `r ncol(df)` columns.
Although, in the next step we will filter the data with subjects that present
valid values for UCLA (UCLA Loneliness Scale 3-item version) in the first and
fourth waves and evaluate just those that did not have loneliness at baseline
(W1).  We will also select only the variables to be used on the data routines.
The `clean_names` function from the `janitor` package was used to clean the
variable names in order to facilitate data manipulation later on.

# 2. Select variables of interest and filter the data

```{r select-variables}
df_loneliness <- df |> dplyr::select(
    ucla_total,
    ucla_total_w4,
    gender_birth,
    heterosexual = heterossexual,
    color,
    year_birth,
    education,
    education_grouped,
    household_income,
    number_people_house,
    unemployed,
    social_distancing,
    phq_total,
    gad_total,
    classif_audit,
    marijuana_frequency,
    physical_activity_dichotomized,
    physical_activity_grouped,
    sleep_quality,
    marital_status_grouped,
    friend_relationship,
    family_relationship,
    religion,
    sampling_weight,
    ipw_w4
) |>
    dplyr::filter(
        !is.na(ucla_total),
        !is.na(ucla_total_w4)
    )
```

In this step, we selected `r ncol(df_loneliness)` variables. They are the
following: UCLA total score on W1 (`ucla_total`), UCLA total score on W4
(`ucla_total_w4`), gender at birth (`gender_birth`), heterosexual
(`heterosexual`), skin color (`color`), birth year (`year_birth`), seven
categories of education (`education`), three categories of education
(`education_grouped`), five levels of household income (`household_income`),
number of people in your house including you (`number_people_house`),
unemployment (`unemployed`), social distancing (`social_distancing`), PHQ-9
total score at W1 (`phq_total`), GAD-7 total score at W1 (`gad_total`), AUDIT
risk [4 categories] (`classif_audit`), cannabis use frequency
(`marijuana_frequency`), physical activity [binary variable]
(`physical_acitivty_dichotomized`), physical activity [more or less than
150min/week] (`physical_activity_grouped`), sleep quality [four categories]
(`sleep_quality`), marital status [with or without partner]
(`marital_status_grouped`), friend relationship quality
(`friend_relationship`), family relationship quality (`family_relationship`),
has a religion (`religion`), sampling weight for demographics
(`sampling_weight`), weight for attrition at W4 (`ipw_w4`).

After the removal of subjects with missing values on UCLA at W1 or W4, we
ended up with a dataset of `r nrow(df_loneliness)` subjects.

```{r retain-only-without-loneliness-at-w1}
df_loneliness <- df_loneliness |>
    dplyr::filter(ucla_total < 6)
```

After removing the subjects with loneliness (UCLA $\geq$ 6) at baseline (W1),
there were `r nrow(df_loneliness)` participants remaining.

# 3. Exploratory data analysis

In this section, we use the `skimr` package to create a detailed summary for
each variable in the dataset in order to get an overview of the data.

## 3.1. Skim the data

```{r skim-the-data}
skimr::skim(df_loneliness)
```

# 4. Feature engineering

In this section, we are going to modify variables and create some new ones in
order to facilitate the data analysis. We'll go through the following steps:

1. Create an `outcome` variable based on UCLA total score at W4. Scores $\geq$
   6 will be positive (`1`) and values $<$ 6 will be negative (`0`).
2. Build an `age` variable based on `year_birth`.
3. Create quadratic and cubic terms (variables) for age (i.e. `age_2` and
   `age_3`). We will also standardize all age variables with $z$-scores.
4. Build a `combined_weight` variable that is the product of `sampling_weight`
   and `ipw_w4` to weight analysis for both demographics and attrition.
5. Standardize PHQ-9 (`phq_total`) and GAD-7 (`gad_total`) scores with
   $z$-scores to facilitate the interpretability of the coefficients.
6. Dichotomize skin color variable (`color`) in white and non-white subjects.
7. Dichotomize the AUDIT risk variable (`classif_audit`) into two levels: low
   risk and moderate/high/severe risk.
8. Dichotomize cannabis use variable (`marijuana frequency`) into "uses
   cannabis" and "does not use cannabis".
9. Dichotomize the variables of quality of family relationships
   (`family_relationship`), quality of friendship relationships
   (`friend_relationship`), and sleep quality (`sleep_quality`) into two levels:
   Bad/Fair and Good/Excellent.
10. Categorize the household income variable (`household_income`) into three
   levels of socioeconomic status: A/B (upper), C (middle) and D/E (lower).
11. Recode all variables to easy and interpretable category labels.
12. Remove the following variables: `education`,
    `physical_activity_dichotomized`, `ucla_total`,
    `ucla_total_w4`, `year_birth`, `marijuana_frequency`, `classif_audit`.
13. Relocate the variables (*not necessary* per se).

```{r feature-eng}
df_loneliness <- df_loneliness |>
    dplyr::mutate(
        # Step 1: Outcome variable based on UCLA score at W4
        outcome = dplyr::if_else(ucla_total_w4 >= 6, 1, 0),
        # Step 2: Age variable based on `year_birth`
        age = 2020 - year_birth,
        age_raw = age,
        # Step 3: Create quadratic and cubic terms for age
        age_2 = age ^ 2,
        age_3 = age ^ 3,
        dplyr::across(c(dplyr::starts_with("age"), -age_raw),
            \(x) (x - mean(x)) / sd(x)
        ),
        # Step 4: Build combined weight variable
        combined_weight = sampling_weight * ipw_w4,
        # Step 5: Standardize PHQ-9 and GAD-7 scores
        dplyr::across(
            dplyr::matches("^(phq|gad)_total$"),
            \(x) (x - mean(x)) / sd(x)
        ),
        # Step 6: Dichotomize skin color in white/non-white subjects
        color = as.factor(dplyr::case_match(color,
            "Branca" ~ "White",
            c("Parda", "Preta", "Amarela", "Indigena") ~ "Non-white"
        )),
        # Step 7: Dichotomize AUDIT risk score
        alcohol_risk = as.factor(dplyr::case_match(
            classif_audit,
            "baixo risco" ~ "Low risk",
            c("risco moderado", "alto risco", "risco severo") ~ "High risk"
        )),
        # Step 8: Create cannabis use variable
        cannabis_use = as.factor(dplyr::case_match( 
            marijuana_frequency,
            "N達o" ~ "No",
            c("Menos que semanalmente", "Semanalmente ou Diariamente") ~ "Yes"
        )),
        # Step 9: Recode sleep quality, friend and family relationships
        dplyr::across(
            c(sleep_quality, friend_relationship, family_relationship),
            \(x) as.factor(dplyr::case_match(
                as.character(x),
                c("Ruim", "Ruins", "Regular", "Regulares") ~ "Worse",
                c("Bom", "Bons", "Excelente", "Excelentes") ~ "Better"
    ) |> forcats::fct_rev())
        ),
        # Step 10: Create three levels of socioeconomic status
        household_income = as.factor(dplyr::case_match(
            household_income,
            c("A", "B") ~ "Upper",
            "C" ~ "Middle",
            c("D", "E") ~ "Lower"
        )),
        # Step 11: Recode some variable labels and adjust reference levels
        heterosexual = relevel(as.factor(dplyr::case_match(
            heterosexual,
            "n達o" ~ "No",
            "sim" ~ "Yes"
        )), ref = "Yes"),
        religion = relevel(as.factor(dplyr::case_match(
            religion,
            "N達o" ~ "No",
            "Sim" ~ "Yes"
        )), ref = "No"),
        social_distancing = as.factor(dplyr::case_match(
            social_distancing,
            "Sim" ~ "Yes",
            "N達o" ~ "No"
        )),
        education_grouped = relevel(
            education_grouped,
            ref = "Up to high-school"
        ),
        alcohol_risk = relevel(
            alcohol_risk,
            ref = "Low risk"
        ),
        gender_birth = relevel(
            gender_birth,
            ref = "Male"
        ),
    ) |>
    # Step 12: Remove some variables
    dplyr::select(-c(education, physical_activity_dichotomized,
                     ucla_total, ucla_total_w4, year_birth,
                     marijuana_frequency, classif_audit)) |>
    # Step 13: Relocate the outcome variable
    dplyr::relocate(outcome, .before = dplyr::everything())
```

The dataset is formatted as below:

```{r print-after-eng}
knitr::kable(head(df_loneliness, 10))
```

# 5. Descriptive analysis

## 5.1. Loneliness incidence

```{r loneliness-bar-plot}
df_loneliness |>
    dplyr::mutate(outcome = dplyr::if_else(outcome == 1, "Yes", "No")) |>
    dplyr::count(outcome) |>
    ggplot2::ggplot(ggplot2::aes(y = n, x = outcome, label = n)) +
    ggplot2::geom_col(fill = "steelblue4") +
    ggplot2::theme_light(14, "IBM Plex Sans") +
    ggplot2::geom_label(
        size = 4,
        family = "IBM Plex Sans",
        label.padding = ggplot2::unit(0.5, "lines")
    ) +
    ggplot2::labs(x = "Loneliness at W4", y = "# of participants")
```

## 5.2. Weighted descriptive tables

In this section we will create three tables: the first, weighted from
demographics (using `sampling_weight`), the second weighted based on the
attrition (`ipw_w4`) associated with the fourth wave (W4), and the third
based on the combined weight from demographics and also attrition
(`sampling_weight * ipw_w4`).

```{r descriptive-analysis-demographic-weight}
#| warning: false
df_loneliness |>
    dplyr::select(-c(ipw_w4, age, age_2, age_3, combined_weight)) |>
    dplyr::mutate(outcome = dplyr::if_else(outcome == 1, "Yes", "No")) |>
    survey::svydesign(
        ~ 1,
        data = _,
        weights = ~ sampling_weight) |>
    gtsummary::tbl_svysummary(
        by = outcome,
        include = -c(sampling_weight),
        digits = list(
            gtsummary::all_categorical() ~ c(0, 1, 1),
            gtsummary::all_continuous() ~ 2
        ),
        statistic = list(
            gtsummary::all_categorical() ~ "{n_unweighted} ({p_unweighted}%/{p}%)"
        ),
        label = list(
            gender_birth ~ "Sex",
            heterosexual ~ "Sexual orientation (heterosexual)",
            color ~ "Skin color",
            education_grouped ~ "Education",
            household_income ~ "Socioeconomic status",
            number_people_house ~ "Number of people in your house (including you)",
            unemployed ~ "Unemployed",
            social_distancing ~ "Social distancing",
            phq_total ~ "Depressive symptoms (PHQ-9)",
            gad_total ~ "Anxiety symptoms (GAD-7)",
            physical_activity_grouped ~ "Physical activity",
            sleep_quality ~ "Sleep quality",
            marital_status_grouped ~ "Marital status (grouped)",
            friend_relationship ~ "Friendship relationship quality",
            family_relationship ~ "Family relationship quality",
            religion ~ "Religion",
            age_raw ~ "Age (in years)",
            alcohol_risk ~ "Alcohol risk zone",
            cannabis_use ~ "Cannabis use"
        )
    ) |>
    gtsummary::add_overall(last = TRUE) |>
    gtsummary::add_p() |>
    gtsummary::modify_header(
        label = '**Characteristic**',
        stat_1 = '**No**, *n* = 348',
        stat_2 = '**Yes**, *n* = 125',
        stat_0 = '**Overall**, *n* = 473',
        p.value = '***p*-value**'
    ) |>
    gtsummary::modify_caption("Descriptive table stratified by loneliness
                              incidence, weighted by demographics.")
```

```{r descriptive-analysis-attrition-weight}
#| warning: false
df_loneliness |>
    dplyr::select(-c(sampling_weight, age, age_2, age_3, combined_weight)) |>
    dplyr::mutate(outcome = dplyr::if_else(outcome == 1, "Yes", "No")) |>
    survey::svydesign(
        ~ 1,
        data = _,
        weights = ~ ipw_w4) |>
    gtsummary::tbl_svysummary(
        by = outcome,
        include = -c(ipw_w4),
        digits = list(
            gtsummary::all_categorical() ~ c(0, 1, 1),
            gtsummary::all_continuous() ~ 2
        ),
        statistic = list(
            gtsummary::all_categorical() ~ "{n_unweighted} ({p_unweighted}%/{p}%)"
        ),
        label = list(
            gender_birth ~ "Sex",
            heterosexual ~ "Sexual orientation (heterosexual)",
            color ~ "Skin color",
            education_grouped ~ "Education",
            household_income ~ "Socioeconomic status",
            number_people_house ~ "Number of people in your house (including you)",
            unemployed ~ "Unemployed",
            social_distancing ~ "Social distancing",
            phq_total ~ "Depressive symptoms (PHQ-9)",
            gad_total ~ "Anxiety symptoms (GAD-7)",
            physical_activity_grouped ~ "Physical activity",
            sleep_quality ~ "Sleep quality",
            marital_status_grouped ~ "Marital status (grouped)",
            friend_relationship ~ "Friendship relationship quality",
            family_relationship ~ "Family relationship quality",
            religion ~ "Religion",
            age_raw ~ "Age (in years)",
            alcohol_risk ~ "Alcohol risk zone",
            cannabis_use ~ "Cannabis use"
        )
    ) |>
    gtsummary::add_overall(last = TRUE) |>
    gtsummary::add_p() |>
    gtsummary::modify_header(
        label = '**Characteristic**',
        stat_1 = '**No**, *n* = 348',
        stat_2 = '**Yes**, *n* = 125',
        stat_0 = '**Overall**, *n* = 473',
        p.value = '***p*-value**'
    ) |>
    gtsummary::modify_caption("Descriptive table stratified by loneliness
                              incidence, weighted by attrition.")
```

```{r descriptive-analysis-combined-weight}
#| warning: false
df_loneliness |>
    dplyr::select(-c(ipw_w4, age, age_2, age_3, sampling_weight)) |>
    dplyr::mutate(outcome = dplyr::if_else(outcome == 1, "Yes", "No")) |>
    survey::svydesign(
        ~ 1,
        data = _,
        weights = ~ combined_weight) |>
    gtsummary::tbl_svysummary(
        by = outcome,
        include = -c(combined_weight),
        digits = list(
            gtsummary::all_categorical() ~ c(0, 1, 1),
            gtsummary::all_continuous() ~ 2
        ),
        statistic = list(
            gtsummary::all_categorical() ~ "{n_unweighted} ({p_unweighted}%/{p}%)"
        ),
        label = list(
            gender_birth ~ "Sex",
            heterosexual ~ "Sexual orientation (heterosexual)",
            color ~ "Skin color",
            education_grouped ~ "Education",
            household_income ~ "Socioeconomic status",
            number_people_house ~ "Number of people in your house (including you)",
            unemployed ~ "Unemployed",
            social_distancing ~ "Social distancing",
            phq_total ~ "Depressive symptoms (PHQ-9)",
            gad_total ~ "Anxiety symptoms (GAD-7)",
            physical_activity_grouped ~ "Physical activity",
            sleep_quality ~ "Sleep quality",
            marital_status_grouped ~ "Marital status (grouped)",
            friend_relationship ~ "Friendship relationship quality",
            family_relationship ~ "Family relationship quality",
            religion ~ "Religion",
            age_raw ~ "Age (in years)",
            alcohol_risk ~ "Alcohol risk zone",
            cannabis_use ~ "Cannabis use"
        )
    ) |>
    gtsummary::add_overall(last = TRUE) |>
    gtsummary::add_p() |>
    gtsummary::modify_header(
        label = '**Characteristic**',
        stat_1 = '**No**, *n* = 348',
        stat_2 = '**Yes**, *n* = 125',
        stat_0 = '**Overall**, *n* = 473',
        p.value = '***p*-value**'
    ) |>
    gtsummary::modify_caption("Descriptive table stratified by loneliness
                              incidence, weighted by the combined weight.")
```

# 6. Bivariate analysis

In this step, we will run several bivariate analyses ($loneliness ~ predictor$)
to pre-select the variables that will be used in the multi-predictor Poisson
regression later on. The cut-off point we will use is based on $p<0.2$.
In the code below, we created a function to calculate the lower and upper
bounds of the 95% confidence intervals (CI) within a tibble structure.

```{r function-to-confint-df}
confint_df <- function(x) {
    tibble::tibble(
        lower = x[2, 1],
        upper = x[2, 2]
    )
}
```

## 6.1. Sociodemographic domain

```{r socio-domain}
df_socio <- df_loneliness |> 
    dplyr::select(
        outcome,
        age,
        age_2,
        age_3,
        gender_birth,
        heterosexual,
        education_grouped,
        household_income,
        color,
        unemployed,
        combined_weight
    )

df_socio |>
    purrr::keep(is.numeric) |>
    tidyr::pivot_longer(
        c(-outcome, -combined_weight),
        names_to = "predictor",
        values_to = "value"
    ) |>
    dplyr::nest_by(predictor) |>
    dplyr::mutate(mod = list(glm(outcome ~ value,
                                 data = data,
                                 family = poisson(link = "log"),
                                 weights = combined_weight)),
                  confint = list(suppressMessages(confint(mod)))) |>
    dplyr::reframe(
        broom::tidy(mod),
        confint_df(confint)
    ) |>
    dplyr::filter(term != "(Intercept)") |>
    dplyr::mutate(rr = exp(estimate),
                  rr_lower = exp(lower),
                  rr_upper = exp(upper)) |>
    dplyr::select(
        Variable = predictor,
        Category = term,
        `$\\beta$` = estimate,
        SE = std.error,
        RR = rr,
        `RR (lower)` = rr_lower,
        `RR (upper)` = rr_upper,
        `p-value` = p.value
    ) |>
    knitr::kable(
        digits = 3,
        caption = "Bivariate analysis of numeric predictors of the sociodemographic domain."
    )

df_socio |>
    dplyr::select(-dplyr::contains("age")) |>
    tidyr::pivot_longer(
        c(-outcome, -combined_weight),
        names_to = "predictor",
        values_to = "value"
    ) |>
    dplyr::nest_by(predictor) |>
    dplyr::mutate(mod = list(glm(outcome ~ value,
                                 data = data,
                                 family = poisson(link = "log"),
                                 weights = combined_weight)),
                  confint = list(suppressMessages(confint(mod)))) |>
    dplyr::reframe(
        broom::tidy(mod),
        confint_df(confint)
    ) |>
    dplyr::filter(term != "(Intercept)") |>
    dplyr::mutate(rr = exp(estimate),
                  rr_lower = exp(lower),
                  rr_upper = exp(upper)) |>
    dplyr::select(
        Variable = predictor,
        Category = term,
        `$\\beta$` = estimate,
        SE = std.error,
        RR = rr,
        `RR (lower)` = rr_lower,
        `RR (upper)` = rr_upper,
        `p-value` = p.value
    ) |>
    knitr::kable(
        digits = 3,
        caption = "Bivariate analysis of categorical predictors of the sociodemographic domain."
    )
```

On the sociodemographic domain, the only variables that did not reach the
significance cut-off were the cubic term of age (`age_3`), skin color (`color`),
and "Upper" level of socioeconomic status (`household_income`). Since there are
three levels in socioeconomic status (`household_income`), this variable will
continue in further investigations.

## 6.2. Lifestyle domain

```{r lifestyle-domain}
df_ls <- df_loneliness |> 
    dplyr::select(
        outcome,
        physical_activity_grouped,
        sleep_quality,
        family_relationship,
        friend_relationship,
        combined_weight
    )

df_ls |>
    tidyr::pivot_longer(
        c(-outcome, -combined_weight),
        names_to = "predictor",
        values_to = "value"
    ) |>
    dplyr::nest_by(predictor) |>
    dplyr::mutate(mod = list(glm(outcome ~ value,
                                 data = data,
                                 family = poisson(link = "log"),
                                 weights = combined_weight)),
                  confint = list(suppressMessages(confint(mod)))) |>
    dplyr::reframe(
        broom::tidy(mod),
        confint_df(confint)
    ) |>
    dplyr::filter(term != "(Intercept)") |>
    dplyr::mutate(rr = exp(estimate),
                  rr_lower = exp(lower),
                  rr_upper = exp(upper)) |>
    dplyr::select(
        Variable = predictor,
        Category = term,
        `$\\beta$` = estimate,
        SE = std.error,
        RR = rr,
        `RR (lower)` = rr_lower,
        `RR (upper)` = rr_upper,
        `p-value` = p.value
    ) |>
    knitr::kable(
        digits = 3,
        caption = "Bivariate analysis of predictors of the lifestyle domain."
    )
```

In the lifestyle domain, all variables have reached the significance cut-off.

## 6.3. Social domain

```{r social-domain}
df_social <- df_loneliness |> 
    dplyr::select(
        outcome,
        number_people_house,
        combined_weight
    )

df_social |>
    tidyr::pivot_longer(
        c(-outcome, -combined_weight),
        names_to = "predictor",
        values_to = "value"
    ) |>
    dplyr::nest_by(predictor) |>
    dplyr::mutate(mod = list(glm(outcome ~ value,
                                 data = data,
                                 family = poisson(link = "log"),
                                 weights = combined_weight)),
                  confint = list(suppressMessages(confint(mod)))) |>
    dplyr::reframe(
        broom::tidy(mod),
        confint_df(confint)
    ) |>
    dplyr::filter(term != "(Intercept)") |>
    dplyr::mutate(rr = exp(estimate),
                  rr_lower = exp(lower),
                  rr_upper = exp(upper)) |>
    dplyr::select(
        Variable = predictor,
        Category = term,
        `$\\beta$` = estimate,
        SE = std.error,
        RR = rr,
        `RR (lower)` = rr_lower,
        `RR (upper)` = rr_upper,
        `p-value` = p.value
    ) |>
    knitr::kable(
        digits = 3,
        caption = "Bivariate analysis of predictors of the social domain."
    )
```

On the social domain, we only have the variable number of people that lives
in your house [including you] (`number_people_house`) and it has passed the
$p<0.2$ cut-off for the hierarchical multi-predictor regression.

## 6.4. Clinical domain

```{r clinical-domain}
df_clinical <- df_loneliness |> 
    dplyr::select(
        outcome,
        phq_total,
        gad_total,
        alcohol_risk,
        cannabis_use,
        combined_weight
    )

df_clinical |>
    dplyr::select(-alcohol_risk, -cannabis_use) |>
    tidyr::pivot_longer(
        c(-outcome, -combined_weight),
        names_to = "predictor",
        values_to = "value"
    ) |>
    dplyr::nest_by(predictor) |>
    dplyr::mutate(mod = list(glm(outcome ~ value,
                                 data = data,
                                 family = poisson(link = "log"),
                                 weights = combined_weight)),
                  confint = list(suppressMessages(confint(mod)))) |>
    dplyr::reframe(
        broom::tidy(mod),
        confint_df(confint)
    ) |>
    dplyr::filter(term != "(Intercept)") |>
    dplyr::mutate(rr = exp(estimate),
                  rr_lower = exp(lower),
                  rr_upper = exp(upper)) |>
    dplyr::select(
        Variable = predictor,
        Category = term,
        `$\\beta$` = estimate,
        SE = std.error,
        RR = rr,
        `RR (lower)` = rr_lower,
        `RR (upper)` = rr_upper,
        `p-value` = p.value
    ) |>
    knitr::kable(
        digits = 3,
        caption = "Bivariate analysis of depressive and anxiety symptoms."
    )

df_clinical |>
    dplyr::select(-phq_total, -gad_total) |>
    tidyr::pivot_longer(
        c(-outcome, -combined_weight),
        names_to = "predictor",
        values_to = "value"
    ) |>
    dplyr::nest_by(predictor) |>
    dplyr::mutate(mod = list(glm(outcome ~ value,
                                 data = data,
                                 family = poisson(link = "log"),
                                 weights = combined_weight)),
                  confint = list(suppressMessages(confint(mod)))) |>
    dplyr::reframe(
        broom::tidy(mod),
        confint_df(confint)
    ) |>
    dplyr::filter(term != "(Intercept)") |>
    dplyr::mutate(rr = exp(estimate),
                  rr_lower = exp(lower),
                  rr_upper = exp(upper)) |>
    dplyr::select(
        Variable = predictor,
        Category = term,
        `$\\beta$` = estimate,
        SE = std.error,
        RR = rr,
        `RR (lower)` = rr_lower,
        `RR (upper)` = rr_upper,
        `p-value` = p.value
    ) |>
    knitr::kable(
        digits = 3,
        caption = "Bivariate analysis of alcohol risk and cannabis use."
    )
```

Regarding the clinical domain, all variables have reached the statistical
significance cut-off.

# 7. Hierarchical multi-predictor Poisson regression

We sequentially added the significant variables from the last analyses into the
Poisson regression, starting from the most distal domain to the most proximal
one (sociodemographic $\rightarrow$ lifestyle $\rightarrow$ social
$\rightarrow$ clinical). The variables that presented $p<0.1$ in the entry
stage remained in the model until the end, even if they lost their significance
in later stages, and those with $p<0.05$ were considered significant. 

## 7.1. Domain-based models

```{r domain-based-models}
# Sociodemographic domain - first entry
df_loneliness |>
    glm(outcome ~ age + age_2 + education_grouped + gender_birth +
        heterosexual + household_income,
        data = _,
        family = poisson(link = "log"),
        weights = combined_weight
    ) |>
    broom::tidy(conf.int = TRUE) |>
    dplyr::select(-statistic, -std.error) |>
    dplyr::mutate(dplyr::across(c(estimate, conf.low, conf.high),
                                exp)) |>
    dplyr::filter(term != "(Intercept)") |>
    dplyr::relocate(p.value, .after = dplyr::last_col()) |>
    dplyr::relocate(estimate, .before = conf.low) |>
    dplyr::mutate(p_lt_01 = dplyr::if_else(p.value < 0.1, "Yes", "No")) |>
    purrr::set_names(
        "Variable", "RR", "RR (lower)", "RR (upper)", "$p$-value", "$p<0.1$"
    ) |>
    knitr::kable(
        digits = 3,
        caption = "Weighted poisson regression with $p$-value
        $<$ 0.2 in bivariate analysis in sociodemographic domain - first entry."
    )

# Lifestyle domain - second entry
df_loneliness |>
    glm(outcome ~ age + age_2 + education_grouped + gender_birth +
        heterosexual + household_income + family_relationship +
        friend_relationship + physical_activity_grouped + sleep_quality,
        data = _,
        family = poisson(link = "log"),
        weights = combined_weight
    ) |>
    broom::tidy(conf.int = TRUE) |>
    dplyr::select(-statistic, -std.error) |>
    dplyr::mutate(dplyr::across(c(estimate, conf.low, conf.high),
                                exp)) |>
    dplyr::filter(term != "(Intercept)") |>
    dplyr::relocate(p.value, .after = dplyr::last_col()) |>
    dplyr::relocate(estimate, .before = conf.low) |>
    dplyr::mutate(p_lt_01 = dplyr::if_else(p.value < 0.1, "Yes", "No")) |>
    purrr::set_names(
        "Variable", "RR", "RR (lower)", "RR (upper)", "$p$-value", "$p<0.1$"
    ) |>
    knitr::kable(
        digits = 3,
        caption = "Weighted poisson regression with $p$-value
        $<$ 0.2 in bivariate analysis in lifestyle domain - second entry."
    )

# Social domain - third entry
df_loneliness |>
    glm(outcome ~ age + age_2 + education_grouped + gender_birth +
        heterosexual + household_income + family_relationship +
        physical_activity_grouped + sleep_quality + number_people_house,
        data = _,
        family = poisson(link = "log"),
        weights = combined_weight
    ) |>
    broom::tidy(conf.int = TRUE) |>
    dplyr::select(-statistic, -std.error) |>
    dplyr::mutate(dplyr::across(c(estimate, conf.low, conf.high),
                                exp)) |>
    dplyr::filter(term != "(Intercept)") |>
    dplyr::relocate(p.value, .after = dplyr::last_col()) |>
    dplyr::relocate(estimate, .before = conf.low) |>
    dplyr::mutate(p_lt_01 = dplyr::if_else(p.value < 0.1, "Yes", "No")) |>
    purrr::set_names(
        "Variable", "RR", "RR (lower)", "RR (upper)", "$p$-value", "$p<0.1$"
    ) |>
    knitr::kable(
        digits = 3,
        caption = "Weighted poisson regression with $p$-value
        $<$ 0.2 in bivariate analysis in social domain - third entry."
    )

# Clinical domain - fourth entry
df_loneliness |>
    glm(outcome ~ age + age_2 + education_grouped + gender_birth +
        heterosexual + household_income + family_relationship +
        physical_activity_grouped + sleep_quality + number_people_house +
        phq_total + gad_total + alcohol_risk + cannabis_use,
        data = _,
        family = poisson(link = "log"),
        weights = combined_weight
    ) |>
    broom::tidy(conf.int = TRUE) |>
    dplyr::select(-statistic, -std.error) |>
    dplyr::mutate(dplyr::across(c(estimate, conf.low, conf.high),
                                exp)) |>
    dplyr::filter(term != "(Intercept)") |>
    dplyr::relocate(p.value, .after = dplyr::last_col()) |>
    dplyr::relocate(estimate, .before = conf.low) |>
    dplyr::mutate(p_lt_01 = dplyr::if_else(p.value < 0.1, "Yes", "No")) |>
    purrr::set_names(
        "Variable", "RR", "RR (lower)", "RR (upper)", "$p$-value", "$p<0.1$"
    ) |>
    knitr::kable(
        digits = 3,
        caption = "Weighted poisson regression with $p$-value
        $<$ 0.2 in bivariate analysis in clinical domain - fourth entry."
    )
```

## 7.2. Final model

```{r final-model}
# Block 1: sociodemographic
block_1 <- glm(outcome ~ age + age_2 + education_grouped + gender_birth +
    heterosexual + household_income,
    data = df_loneliness,
    family = poisson(link = "log"),
    weights = combined_weight
)

# Block 2: Lifestyle and social
block_2 <- glm(outcome ~ age + age_2 + education_grouped + gender_birth +
    heterosexual + household_income + family_relationship +
    friend_relationship + physical_activity_grouped + sleep_quality +
    number_people_house,
    data = df_loneliness,
    family = poisson(link = "log"),
    weights = combined_weight
)

# Block 3: Clinical
block_3 <- glm(outcome ~ age + age_2 + education_grouped + gender_birth +
    heterosexual + household_income + family_relationship +
    physical_activity_grouped + sleep_quality + number_people_house +
    phq_total + gad_total + alcohol_risk + cannabis_use,
    data = df_loneliness,
    family = poisson(link = "log"),
    weights = combined_weight
)

huxtable::huxreg(
  list("Block 1: Sociodemographic" = block_1,
       "Block 2: Lifestyle and social" = block_2,
       "Block 3: Clinical" = block_3),
  stars = NULL,
  error_format = "[{conf.low},  {conf.high}], {dplyr::if_else(p.value < 0.001, 'p<0.001', paste0('p=', as.character(p.value)))}",
  error_pos = "same",
  bold_signif = 0.05,
  number_format = "%.3f",
  statistics = c(n = "nobs",
                 "-2log likelihood" = "logLik",
                 AIC = "AIC",
                 BIC = "BIC"),
  ci_level = 0.95,
  outer_borders = 1,
  tidy_args = list(exponentiate = TRUE, conf.int = TRUE),
  coefs = c("(Intercept)" = "(Intercept)",
    "Age (z-score)" = "age",
    "Age (quadratic term)" = "age_2",
    "Education (college education)" = "education_groupedSome college education",
    "Education (master or PhD)" = "education_groupedMaster or Doctorate",
    "Sex (female)" = "gender_birthFemale",
    "Sexual orientation (non-heterosexual)" = "heterosexualNo",
    "Socioeconomic status (middle)" = "household_incomeMiddle",
    "Socioeconomic status (upper)" = "household_incomeUpper",
    "Socioeconomic status (upper)" = "household_incomeUpper",
    "Positive family relationship" = "family_relationshipBetter",
    "Positive friendship relationship" = "friend_relationshipBetter",
    "Physical activity (more than 150 min/week)" = "physical_activity_groupedMore than 150min/week",
    "Good sleep quality" = "sleep_qualityBetter",
    "Number of people living in your house" = "number_people_house",
    "Depressive symptoms (PHQ-9)" = "phq_total",
    "Anxiety symptoms (GAD-7)" = "gad_total",
    "Alcohol risk zone (moderate, high or severe)" = "alcohol_riskHigh risk",
    "Cannabis use (yes)" = "cannabis_useYes")
) |>
    huxtable::set_caption("Multi-predictor Poisson regression analysis to
        evaluate factors associated with loneliness incidence. The table
        presents the risk ratios and the corresponding 95% CIs with p-values.")
```

## 7.3. Odds ratio plot

### 7.3.1. With sort

```{r or-plot-sorted}
or_plot <- plot(parameters::parameters(
        block_3,
        exponentiate = TRUE
        ), show_labels = TRUE, size_text = 6, size_point = 1.2, sort = "descending") +
     ggplot2::scale_y_discrete(labels = c(
     "Physical activity [More than 150min/week]",
     "Age",
     "Sleep quality [Better]",
     "Education [Some college education]",
     "Education [Master or Doctorate]",
     "Family relationship [Better]",
     "Number of people living in your house",
     "Anxiety symptoms [GAD-7]",
     "Depressive symptoms [PHQ-9]",
     "Household income [Upper]",
     "Household income [Middle]",
     "Heterosexual [No]",
     "Alcohol risk [High risk]",
     "Gender birth [Female]",
     "Cannabis use [Yes]",
     "Age (quadratic term)")
     ) +
    ggplot2::labs(x = "RR") +
    ggplot2::theme(
        axis.text = ggplot2::element_text(size = 18, color = "black"),
        axis.title = ggplot2::element_text(size = 18, color = "black")
    )

ggplot2::ggsave(filename = "~/tmp/or_plot_loneliness_sorted.png", or_plot,
dpi = 300, width = 16, height = 10)
```

```{r or-plot-unsorted}
or_plot <- plot(parameters::parameters(
        block_3,
        exponentiate = TRUE
        ), show_labels = TRUE, size_text = 6, size_point = 1.2) +
     ggplot2::scale_y_discrete(labels = c(
     "Cannabis use [Yes]",
     "Alcohol risk [High risk]",
     "Anxiety symptoms [GAD-7]",
     "Depressive symptoms [PHQ-9]",
     "Number of people living in your house",
     "Sleep quality [Better]",
     "Physical activity [More than 150min/week]",
     "Family relationship [Better]",
     "Household income [Upper]",
     "Household income [Middle]",
     "Heterosexual [No]",
     "Gender birth [Female]",
     "Education [Master or Doctorate]",
     "Education [Some college education]",
     "Age (quadratic term)",
     "Age")
     ) +
    ggplot2::labs(x = "RR") +
    ggplot2::theme(
        axis.text = ggplot2::element_text(size = 18, color = "black"),
        axis.title = ggplot2::element_text(size = 18, color = "black")
    )

ggplot2::ggsave(filename = "~/tmp/or_plot_loneliness_unsorted.png", or_plot,
dpi = 300, width = 16, height = 10)
```

# Session information

```{r session-info}
sessioninfo::session_info()
```
